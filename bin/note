#!/usr/bin/env bash

note=$1
newdate="## \`$(date +'%Y_%m%d %a %r')\`"
generated=
if [[ -z "$note" ]]; then
    note="$(date +'%Y_%m%d--%a_hour_%H')"
    if [[ $(pwd) != $HOME ]]; then
        extra_title=" ($(basename $(pwd)))"
    else
        extra_title=" (HOME)"
    fi
    title="$(echo $note | tr '_' '-')$extra_title"
    newdate="## $(date +'%r')"
    generated=yes
elif [[ -n $(dirname $note) && -d $note ]]; then
    cd $note
    note="$(date +'%Y_%m%d--%a_hour_%H')"
    title="$1/$(echo $note | tr '_' '-')"
    newdate="## $(date +'%r')"
    generated=yes
else
    title="$note"
fi

found=$(find . -maxdepth 1 -name "${note}*" -print)
[[ -n "$found" && "$generated" = "yes" ]] && note="${note}-$(uuidgen | head -c6)"

if [[ "$note" =~ \.md$ ]]; then
    fname="${note}"
else
    fname="${note}.md"
fi

template=
if [[ ! -s "$fname" ]]; then
    # Genarate the file since it does not exist
    template="${title}\n----------\n\n$newdate\n\n"
    echo -e "$template" > "$fname" || exit 1

    # Open the file with vim (in insert mode, at the end of the file)
    vim + -c 'startinsert' $fname
else
    # Dump a timestamp into the existing file
    echo -e "\n$newdate\n\n" >> "$fname" || exit 1

    # Open the file with vim wherever the cursor was before
    vim $fname
fi

content=$(cat "$fname")
if [[ -z "$content" ]]; then
    rm "$fname"
elif [[ "$content" == $(echo -e "$template") ]]; then
    rm "$fname"
else
    num_tail_lines=30
    if tput lines &>/dev/null; then
        num_tail_lines=$(($(tput lines) -5))
    fi
    echo -e "$content" | tail -n $num_tail_lines
    if [[ "$fname" =~ ^[0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9] ]]; then
        echo -en "\n--------------------\nsave as\n> "
        read newfile
        if [[ -n "$newfile" ]]; then
            [[ ! "$newfile" =~ \.md$ ]] && newfile="${newfile}.md"
            mv -nv "$fname" "$newfile"
        fi
    fi
fi
