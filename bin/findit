#!/bin/bash

# A wrapper script to find files in a specified directory, with a maxdepth,
# a particular filename pattern, modified within a certain time period, with
# results optionally piped to another command
#
#   findit --help

if [[ $(uname) == "Darwin" ]]; then
    _find="gfind"
else
    _find="find"
fi

_dirname=$1
if [[ "${_dirname:0:2}" == "--" ]]; then
    _dirname="."
elif [[ -z "$_dirname" ]]; then
    _dirname="."
else
    shift 2>/dev/null
fi

if [[ ! -d "$_dirname" ]]; then
    echo "$_dirname is not a directory"
    exit 1
fi

while [[ -n "$1" ]]; do
    case "$1" in
        --depth)
            depth=$2
            shift ;;
        --type)
            _type=$2
            shift ;;
        --complex)
            complex=$2
            shift ;;
        --exclude_dirs)
            exclude_dirs=$2
            shift ;;
        --iexclude_dirs)
            iexclude_dirs=$2
            shift ;;
        --exclude_exts)
            exclude_exts=$2
            shift ;;
        --iexclude_exts)
            iexclude_exts=$2
            shift ;;
        --exclude)
            exclude=$2
            shift ;;
        --iexclude)
            iexclude=$2
            shift ;;
        --pattern)
            pattern=$2
            shift ;;
        --ipattern)
            ipattern=$2
            shift ;;
        --exts)
            exts=$2
            shift ;;
        --iexts)
            iexts=$2
            shift ;;
        --sizes)
            sizes=$2
            shift ;;
        --empty)
            empty=yes
            ;;
        --not_empty)
            not_empty=yes
            ;;
        --months)
            months=$2
            shift ;;
        --weeks)
            weeks=$2
            shift ;;
        --days)
            days=$2
            shift ;;
        --hours)
            hours=$2
            shift ;;
        --minutes)
            minutes=$2
            shift ;;
        --pipesort)
            pipesort=$2
            shift ;;
        --pipe)
            pipe=$2
            shift ;;
        --zero)
            zero=yes
            ;;
        --stamp)
            stamp="-printf '%TY_%Tm%Td-%Ta-%TH%TM%.2TS %p\n'"
            ;;
        --help)
            echo "Usage: findit [dir] [options]"
            echo -e "\n  Wrapper to the find command\n\nOptions:\n"
            echo "  --depth number              maxdepth to search for files"
            echo "  --type character            regular (f)ile, (d)irectory, symbolic (l)ink, (s)ocket, (b)lock special"
            echo "  --pattern string            comma-separated list of filename patterns"
            echo "  --ipattern string           comma-separated list of filename patterns (case insensitive)"
            echo "  --complex string            raw options passed directly to 'find'"
            echo "  --exclude_dirs string       comma-separated list of directories/patterns to exclude"
            echo "  --iexclude_dirs string      comma-separated list of directories/patterns to exclude (case insensitive)"
            echo "  --exclude_exts string       comma-separated list of extensions to exclude"
            echo "  --iexclude_exts string      comma-separated list of extensions to exclude (case insensitive)"
            echo "  --exclude string            comma-separated list of filename patterns to exclude"
            echo "  --iexclude string           comma-separated list of filename patterns to exclude (case insensitive)"
            echo "  --exts string               comma-separated list of extensions to include"
            echo "  --iexts string              comma-separated list of extensions to include (case insensitive)"
            echo "  --sizes string              comma-separated list of sizes, prefixed with +/- and unit of k M or G (i.e. +2G)"
            echo "  --empty                     only match files that are empty"
            echo "  --not_empty                 only match files that are not empty"
            echo "  --months number             only match files modified in a number of months"
            echo "  --weeks number              only match files modified in a number of weeks"
            echo "  --days number               only match files modified in a number of days"
            echo "  --hours number              only match files modified in a number of hours"
            echo "  --minutes number            only match files modified in a number of minutes"
            echo "  --pipe command              pipe files to a SINGLE command"
            echo "  --pipesort command          pipe sorted files to a SINGLE command"
            echo "  --zero                      print matching filenames delimited by null char (-print0)... to pipe to 'xargs -0 -I {}' manually"
            echo "  --stamp                     prepend timestamps to output"
            echo "  --help                      show this message and exit"
            echo -e '\nExamples:\n'
            echo '  findit --exts "md" --weeks 1 --stamp'
            echo '  findit --exts "md" --weeks 1 --pipesort "cp -av {} /tmp/stuff"'
            echo '  findit ~ --exts "md, txt" --exclude_dirs "venv, node_modules, Library" --months 2 --depth 3'
            echo '  findit --pattern ".*.sw[po]" --pipe "ls -gothr"'
            echo '  findit --exts "mp4, mkv" --pipesort "vlc --fullscreen"'
            echo '  findit --exts "jpg, jpeg, png, gif" --pipe "du -sch"'
            echo '  findit --exts "xml" --pipesort "grep --color {{[^}]*}}"'
            echo '  findit --depth 3 --exts "log" --not_empty --pipesort "wc -l"'
            echo "  findit --complex \"-iname '*.log' -type f ! -size 0\""
            echo "  findit --complex \"-iname '*.log' -type f -empty -delete\""
            echo '  findit --pattern "node_modules" --type d'
            echo '  findit --sizes "+1G" --pipesort "du -sh"'
            echo '  findit --depth 4 --sizes "+1M, -10M" --exclude_dirs ".cache" --pipesort "du -sh"'
            echo '  findit --type d --exclude_dirs ".git" --depth 2'
            echo '  findit --exclude_dirs "node_modules, .git, venv, build, alembic, __pycache__, .pytest_cache" --exclude_exts "json, yml, xml, txt, md" --pipe "wc -l"'
            echo '  findit --exclude_dirs "venv, env" --exclude_exts "js, json, java, map, htm, html, pyc" --pattern "test*" --pipe "grep assert" | egrep "(==|!=)"'
            echo '  findit --pattern "__init__.py" --exclude_dirs "venv" --not_empty --pipesort "wc -l" | sort -n'
            echo '  findit --depth 4 --type d --exclude_dirs ".git, *.egg-info, venv" --not_empty --pipesort "du -sh {}" | sort -h'
            echo '  findit --exclude_dirs "venv" --pattern "settings.ini" --zero | xargs -0 -I {} sh -c "echo \"\n\n\n==================\n{}\"; cat {}"'
            exit 0
            ;;
        *)
            echo "Unknown parameter: $1" >&2
            exit 1
    esac

    if ! shift; then
        echo "Missing parameter argument" >&2
        exit 1
    fi
done

if [[ "$_type" != [fdlspbc] ]]; then
    _type=f
fi

if [[ "$depth" == [0-9]* ]]; then
    find_cmd="$_find $_dirname -maxdepth $depth"
else
    find_cmd="$_find $_dirname"
fi

if [[ -n "$exclude_dirs" ]]; then
    IFS=',' read -ra items <<< "$exclude_dirs"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="-name '${items[0]}'"
    else
        exclude_part="\( -name '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -name '$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part -type d -prune -o"
fi

if [[ -n "$iexclude_dirs" ]]; then
    IFS=',' read -ra items <<< "$iexclude_dirs"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="-iname '${items[0]}'"
    else
        exclude_part="\( -iname '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -iname '$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part -type d -prune -o"
fi

if [[ -n "$exclude_exts" ]]; then
    IFS=',' read -ra items <<< "$exclude_exts"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="! -name '*.${items[0]}'"
    else
        exclude_part="! \( -name '*.${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -name '*.$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part"
fi

if [[ -n "$iexclude_exts" ]]; then
    IFS=',' read -ra items <<< "$iexclude_exts"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="! -iname '*.${items[0]}'"
    else
        exclude_part="! \( -iname '*.${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -iname '*.$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part"
fi

if [[ -n "$exclude" ]]; then
    IFS=',' read -ra items <<< "$exclude"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="! -name '${items[0]}'"
    else
        exclude_part="! \( -name '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -name '$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part"
fi

if [[ -n "$iexclude" ]]; then
    IFS=',' read -ra items <<< "$iexclude"
    if [[ ${#items[@]} -eq 1 ]]; then
        exclude_part="! -iname '${items[0]}'"
    else
        exclude_part="! \( -iname '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            exclude_part="$exclude_part -o -iname '$item'"
        done
        set +f
        exclude_part="$exclude_part \)"
    fi
    find_cmd="$find_cmd $exclude_part"
fi

find_cmd="$find_cmd -type $_type"

if [[ -n "$exts" ]]; then
    IFS=',' read -ra items <<< "$exts"
    if [[ ${#items[@]} -eq 1 ]]; then
        part="-name '*.${items[0]}'"
    else
        part="\( -name '*.${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            part="$part -o -name '*.$item'"
        done
        set +f
        part="$part \)"
    fi
    find_cmd="$find_cmd $part"
fi

if [[ -n "$iexts" ]]; then
    IFS=',' read -ra items <<< "$iexts"
    if [[ ${#items[@]} -eq 1 ]]; then
        part="-iname '*.${items[0]}'"
    else
        part="\( -iname '*.${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            part="$part -o -iname '*.$item'"
        done
        set +f
        part="$part \)"
    fi
    find_cmd="$find_cmd $part"
fi

if [[ -n "$pattern" ]]; then
    IFS=',' read -ra items <<< "$pattern"
    if [[ ${#items[@]} -eq 1 ]]; then
        part="-name '${items[0]}'"
    else
        part="\( -name '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            part="$part -o -name '$item'"
        done
        set +f
        part="$part \)"
    fi
    find_cmd="$find_cmd $part"
fi

if [[ -n "$ipattern" ]]; then
    IFS=',' read -ra items <<< "$ipattern"
    if [[ ${#items[@]} -eq 1 ]]; then
        part="-iname '${items[0]}'"
    else
        part="\( -iname '${items[0]}'"
        set -f
        for item in ${items[@]:1}; do
            part="$part -o -iname '$item'"
        done
        set +f
        part="$part \)"
    fi
    find_cmd="$find_cmd $part"
fi

if [[ -n "$sizes" ]]; then
    IFS=',' read -ra items <<< "$sizes"
    for item in ${items[@]}; do
        find_cmd="$find_cmd -size $item"
    done
fi

if [[ -n "$complex" ]]; then
    find_cmd="$find_cmd $complex"
fi

if [[ -n "$empty" ]]; then
    find_cmd="$find_cmd -empty"
elif [[ -n "$not_empty" ]]; then
    find_cmd="$find_cmd ! -empty"
fi

if [[ "$minutes" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$minutes"
elif [[ "$hours" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * $hours))"
elif [[ "$days" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * $days))"
elif [[ "$weeks" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * 7 * $weeks))"
elif [[ "$months" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * 31 * $months))"
fi

if [[ -n "$stamp" ]]; then
    if [[ -z "$pipesort" && -z "$pipe" ]]; then
        find_cmd="$find_cmd $stamp"
    fi
elif [[ -z "$pipesort" && -z "$pipe" && -z "$zero" ]]; then
    [[ ! "$find_cmd" =~ \-print ]] && find_cmd="$find_cmd -print"
fi

xargs_dash_i=
[[ -n $(echo "$pipe$pipesort" | grep "{}") ]] && xargs_dash_i="-I {}"

if [[ -n "$pipesort" ]]; then
    echo "$find_cmd -print0 | sort -z | xargs -0 $xargs_dash_i $pipesort" >&2
    eval "$find_cmd -print0 | sort -z" | xargs -0 $xargs_dash_i $pipesort
elif [[ -n "$pipe" ]]; then
    echo "$find_cmd -print0 | xargs -0 $xargs_dash_i $pipe" >&2
    eval "$find_cmd -print0" | xargs -0 $xargs_dash_i $pipe
elif [[ -n "$zero" ]]; then
    echo "$find_cmd -print0" >&2
    eval "$find_cmd -print0"
else
    echo "$find_cmd" >&2
    eval "$find_cmd"
fi
